# syntax=docker/dockerfile:1.7
ARG PYWINE_TAG=3.13
FROM tobix/pywine:${PYWINE_TAG} AS builder

ARG DEBIAN_FRONTEND=noninteractive
ARG UV_WIN_VERSION=0.6.2
ARG PBS_RELEASE=20250115
ARG PY_VERSION=3.12.8
ARG MINGIT_VERSION=2.47.1.windows.1

# Параметры приложения
ARG APP_NAME=pygato
ARG ENTRY=main.py
ARG PYINSTALLER_ARGS="--onefile --windowed --noconfirm"

ENV WINEDEBUG=-all \
    WINEPREFIX=/root/.wine \
    UV_EXE=C:\\uv\\uv.exe \
    UVX_EXE=C:\\uv\\uvx.exe \
    WINROOT=C:\\win \
    WINPY=C:\\win\\python \
    WINGIT=C:\\win\\git \
    APPDIR=C:\\app \
    # ключевое: куда uv будет создавать проектное окружение
    UV_PROJECT_ENVIRONMENT=C:\\app\\.venv-win \
    # фиксируем интерпретатор для uv
    UV_PYTHON=C:\\win\\python\\python.exe

USER root
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Инструменты
RUN apt-get update \
 && apt-get install -y --no-install-recommends ca-certificates curl unzip xz-utils libarchive-tools jq \
 && rm -rf /var/lib/apt/lists/*

# UV (Windows) -> C:\uv
RUN set -eux; \
    mkdir -p /root/.wine/drive_c/uv; \
    curl -fL "https://github.com/astral-sh/uv/releases/download/${UV_WIN_VERSION}/uv-x86_64-pc-windows-msvc.zip" -o /tmp/uv.zip; \
    unzip -j /tmp/uv.zip uv.exe  -d /root/.wine/drive_c/uv; \
    unzip -j /tmp/uv.zip uvx.exe -d /root/.wine/drive_c/uv || true; \
    rm -f /tmp/uv.zip; \
    wine cmd /c "%UV_EXE% --version"

# Windows Python (PBS) -> C:\win\python (важно срезать верхний каталог)
RUN set -eux; \
    mkdir -p /root/.wine/drive_c/win/python; \
    curl -fL "https://github.com/astral-sh/python-build-standalone/releases/download/${PBS_RELEASE}/cpython-${PY_VERSION}+${PBS_RELEASE}-x86_64-pc-windows-msvc-install_only_stripped.tar.gz" -o /tmp/python.tar.gz; \
    bsdtar -xf /tmp/python.tar.gz -C /root/.wine/drive_c/win/python --strip-components 1; \
    rm -f /tmp/python.tar.gz; \
    wine cmd /c "%WINPY%\\python.exe -V"

# MinGit -> C:\win\git (для git-зависимостей)
RUN set -eux; \
    mkdir -p /root/.wine/drive_c/win/git; \
    curl -fL "https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.1/MinGit-2.51.0-64-bit.zip" -o /tmp/git.zip; \
    unzip -q /tmp/git.zip -d /root/.wine/drive_c/win/git; \
    rm -f /tmp/git.zip

# Исходники в C:\app
WORKDIR /src
COPY . /src
RUN mkdir -p /root/.wine/drive_c/app && cp -a /src/. /root/.wine/drive_c/app/

# ВАЖНО: убрать мешающий линуксовый .venv (если случайно попал в COPY)
RUN rm -rf /root/.wine/drive_c/app/.venv /root/.wine/drive_c/app/.venv-win

# uv sync по pyproject.toml / uv.lock
# WINEPATH извне: так uv увидит C:\win\git\cmd для git-зависимостей
RUN set -eux; \
    WINEPATH="C:\\win\\git\\cmd" \
    wine cmd /c "cd /d %APPDIR% && if exist uv.lock ( %UV_EXE% sync --frozen ) else ( %UV_EXE% sync )"

# Сборка EXE: uv run pyinstaller в проектном окружении
RUN set -eux; \
    WINEPATH="C:\\win\\git\\cmd" \
    wine cmd /c "cd /d %APPDIR% && \
        if exist %APP_NAME%.spec ( \
            %UV_EXE% run --with pyinstaller -- pyinstaller --distpath %APPDIR%\\dist\\windows\\pyinstaller --workpath %APPDIR%\\build\\pyinstaller --clean %APP_NAME%.spec \
        ) else ( \
            %UV_EXE% run --with pyinstaller -- pyinstaller --name ${APP_NAME} --paths %APPDIR% ${PYINSTALLER_ARGS} --distpath %APPDIR%\\dist\\windows\\pyinstaller --workpath %APPDIR%\\build\\pyinstaller %ENTRY% \
        )"

# Вынести артефакты
RUN mkdir -p /out/windows && cp -a /root/.wine/drive_c/app/dist/windows/. /out/windows/

FROM scratch AS artifact
COPY --from=builder /out /
